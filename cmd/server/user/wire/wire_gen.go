// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	adapter2 "github.com/Wenrh2004/lark-lite-server/internal/user/adapter"
	"github.com/Wenrh2004/lark-lite-server/internal/user/application"
	domain2 "github.com/Wenrh2004/lark-lite-server/internal/user/domain"
	repository2 "github.com/Wenrh2004/lark-lite-server/internal/user/infrastructure/repository"
	"github.com/Wenrh2004/lark-lite-server/pkg/adapter"
	"github.com/Wenrh2004/lark-lite-server/pkg/application/app"
	"github.com/Wenrh2004/lark-lite-server/pkg/application/server/rpc"
	"github.com/Wenrh2004/lark-lite-server/pkg/domain"
	"github.com/Wenrh2004/lark-lite-server/pkg/infrastruct/repository"
	"github.com/Wenrh2004/lark-lite-server/pkg/jwt"
	"github.com/Wenrh2004/lark-lite-server/pkg/log"
	"github.com/Wenrh2004/lark-lite-server/pkg/sid"
	"github.com/google/wire"
	"github.com/spf13/viper"
)

// Injectors from wire.go:

func NewWire(viperViper *viper.Viper, logger *log.Logger) (*app.App, func(), error) {
	service := adapter.NewService(logger)
	sidSid := sid.NewSid()
	jwtJWT := jwt.NewJwt(viperViper)
	db := repository.NewDB(viperViper, logger)
	client := repository.NewRedis(viperViper)
	repositoryRepository := repository2.NewRepository(logger, db, client)
	transaction := repository2.NewTransaction(repositoryRepository)
	domainService := domain.NewService(logger, sidSid, jwtJWT, transaction)
	userRepository := repository2.NewUserRepository(repositoryRepository)
	userService := domain2.NewUserService(domainService, userRepository)
	userServiceImpl := adapter2.NewUserServiceImpl(service, userService)
	server := application.NewUserRPCApplication(viperViper, logger, userServiceImpl)
	appApp := newApp(server, viperViper)
	return appApp, func() {
	}, nil
}

// wire.go:

var infrastructureSet = wire.NewSet(repository.NewDB, repository.NewRedis, repository2.NewTransaction, repository2.NewRepository, repository2.NewUserRepository)

var domainSet = wire.NewSet(domain.NewService, domain2.NewUserService)

var adapterSet = wire.NewSet(adapter.NewService, adapter2.NewUserServiceImpl)

var applicationSet = wire.NewSet(application.NewUserRPCApplication)

// build App
func newApp(

	rpcServer *rpc.Server,
	conf *viper.Viper,

) *app.App {
	return app.NewApp(app.WithServer(rpcServer), app.WithName(conf.GetString("app.name")))
}
