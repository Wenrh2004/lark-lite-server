// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	adapter2 "github.com/Wenrh2004/lark-lite-server/internal/user/adapter"
	"github.com/Wenrh2004/lark-lite-server/internal/user/application"
	"github.com/Wenrh2004/lark-lite-server/internal/user/common"
	"github.com/Wenrh2004/lark-lite-server/pkg/adapter"
	"github.com/Wenrh2004/lark-lite-server/pkg/application/app"
	"github.com/Wenrh2004/lark-lite-server/pkg/application/resolver/rpc"
	"github.com/Wenrh2004/lark-lite-server/pkg/application/server/http"
	"github.com/Wenrh2004/lark-lite-server/pkg/log"
	"github.com/google/wire"
	"github.com/spf13/viper"
)

// Injectors from wire.go:

func NewWire(viperViper *viper.Viper, logger *log.Logger) (*app.App, func(), error) {
	service := adapter.NewService(logger)
	resolver := rpc.NewResolver(viperViper)
	client := common.NewUserClient(viperViper, resolver)
	userHandler := adapter2.NewUserHandler(service, client)
	server := application.NewUserHTTPApplication(viperViper, logger, userHandler)
	appApp := newApp(server, viperViper)
	return appApp, func() {
	}, nil
}

// wire.go:

var infrastructureSet = wire.NewSet(adapter.NewService, rpc.NewResolver, common.NewUserClient)

var adapterSet = wire.NewSet(adapter2.NewUserHandler)

var applicationSet = wire.NewSet(application.NewUserHTTPApplication)

// build App
func newApp(
	httpServer *http.Server,

	conf *viper.Viper,

) *app.App {
	return app.NewApp(app.WithServer(httpServer), app.WithName(conf.GetString("app.name")))
}
