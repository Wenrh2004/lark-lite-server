// Code generated by Kitex v0.14.1. DO NOT EDIT.

package user

import (
	"context"
	"github.com/Wenrh2004/lark-lite-server/kitex_gen/common"

	"github.com/cloudwego/prutal"
)

type RegisterRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (x *RegisterRequest) Reset() { *x = RegisterRequest{} }

func (x *RegisterRequest) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *RegisterRequest) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *RegisterRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RegisterRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type LoginRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (x *LoginRequest) Reset() { *x = LoginRequest{} }

func (x *LoginRequest) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *LoginRequest) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *LoginRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LoginRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type RefreshRequest struct {
	RefreshToken string `protobuf:"bytes,1,opt,name=refresh_token" json:"refresh_token,omitempty"`
}

func (x *RefreshRequest) Reset() { *x = RefreshRequest{} }

func (x *RefreshRequest) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *RefreshRequest) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *RefreshRequest) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

type UpdateRequest struct {
	UserId        int64  `protobuf:"varint,1,opt,name=user_id" json:"user_id,omitempty"`
	Email         string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	Name          string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Nickname      string `protobuf:"bytes,4,opt,name=nickname" json:"nickname,omitempty"`
	AvatarUrl     string `protobuf:"bytes,5,opt,name=avatar_url" json:"avatar_url,omitempty"`
	BackgroundUrl string `protobuf:"bytes,6,opt,name=background_url" json:"background_url,omitempty"`
	Signature     string `protobuf:"bytes,7,opt,name=signature" json:"signature,omitempty"`
	Phone         string `protobuf:"bytes,8,opt,name=phone" json:"phone,omitempty"`
	Gender        int32  `protobuf:"varint,9,opt,name=gender" json:"gender,omitempty"`
}

func (x *UpdateRequest) Reset() { *x = UpdateRequest{} }

func (x *UpdateRequest) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *UpdateRequest) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UpdateRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UpdateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateRequest) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UpdateRequest) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *UpdateRequest) GetBackgroundUrl() string {
	if x != nil {
		return x.BackgroundUrl
	}
	return ""
}

func (x *UpdateRequest) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *UpdateRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *UpdateRequest) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

type TokenPair struct {
	AccessToken      string `protobuf:"bytes,1,opt,name=access_token" json:"access_token,omitempty"`
	AccessExpiresIn  int64  `protobuf:"varint,2,opt,name=access_expires_in" json:"access_expires_in,omitempty"`
	RefreshToken     string `protobuf:"bytes,3,opt,name=refresh_token" json:"refresh_token,omitempty"`
	RefreshExpiresIn int64  `protobuf:"varint,4,opt,name=refresh_expires_in" json:"refresh_expires_in,omitempty"`
}

func (x *TokenPair) Reset() { *x = TokenPair{} }

func (x *TokenPair) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *TokenPair) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *TokenPair) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *TokenPair) GetAccessExpiresIn() int64 {
	if x != nil {
		return x.AccessExpiresIn
	}
	return 0
}

func (x *TokenPair) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *TokenPair) GetRefreshExpiresIn() int64 {
	if x != nil {
		return x.RefreshExpiresIn
	}
	return 0
}

type UserAuthInfo struct {
	UserId    int64      `protobuf:"varint,1,opt,name=user_id" json:"user_id,omitempty"`
	Username  string     `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Nickname  string     `protobuf:"bytes,4,opt,name=nickname" json:"nickname,omitempty"`
	AvatarUrl string     `protobuf:"bytes,5,opt,name=avatar_url" json:"avatar_url,omitempty"`
	Token     *TokenPair `protobuf:"bytes,6,opt,name=token" json:"token,omitempty"`
}

func (x *UserAuthInfo) Reset() { *x = UserAuthInfo{} }

func (x *UserAuthInfo) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *UserAuthInfo) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UserAuthInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserAuthInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserAuthInfo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserAuthInfo) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *UserAuthInfo) GetToken() *TokenPair {
	if x != nil {
		return x.Token
	}
	return nil
}

type UserAuthInfoResponse struct {
	Resp *common.BaseResponse `protobuf:"bytes,1,opt,name=resp" json:"resp,omitempty"`
	User *UserAuthInfo        `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
}

func (x *UserAuthInfoResponse) Reset() { *x = UserAuthInfoResponse{} }

func (x *UserAuthInfoResponse) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *UserAuthInfoResponse) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UserAuthInfoResponse) GetResp() *common.BaseResponse {
	if x != nil {
		return x.Resp
	}
	return nil
}

func (x *UserAuthInfoResponse) GetUser() *UserAuthInfo {
	if x != nil {
		return x.User
	}
	return nil
}

type AuthResponse struct {
	Resp  *common.BaseResponse `protobuf:"bytes,1,opt,name=resp" json:"resp,omitempty"`
	Token *TokenPair           `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
}

func (x *AuthResponse) Reset() { *x = AuthResponse{} }

func (x *AuthResponse) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *AuthResponse) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *AuthResponse) GetResp() *common.BaseResponse {
	if x != nil {
		return x.Resp
	}
	return nil
}

func (x *AuthResponse) GetToken() *TokenPair {
	if x != nil {
		return x.Token
	}
	return nil
}

type GetUserInfoRequest struct {
	UserId int64 `protobuf:"varint,1,opt,name=user_id" json:"user_id,omitempty"`
}

func (x *GetUserInfoRequest) Reset() { *x = GetUserInfoRequest{} }

func (x *GetUserInfoRequest) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *GetUserInfoRequest) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *GetUserInfoRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GetUserInfoResponse struct {
	Resp *common.BaseResponse `protobuf:"bytes,1,opt,name=resp" json:"resp,omitempty"`
	User *UserAuthInfo        `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
}

func (x *GetUserInfoResponse) Reset() { *x = GetUserInfoResponse{} }

func (x *GetUserInfoResponse) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *GetUserInfoResponse) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *GetUserInfoResponse) GetResp() *common.BaseResponse {
	if x != nil {
		return x.Resp
	}
	return nil
}

func (x *GetUserInfoResponse) GetUser() *UserAuthInfo {
	if x != nil {
		return x.User
	}
	return nil
}

type UserService interface {
	Register(ctx context.Context, req *RegisterRequest) (res *UserAuthInfoResponse, err error)
	Login(ctx context.Context, req *LoginRequest) (res *UserAuthInfoResponse, err error)
	Refresh(ctx context.Context, req *RefreshRequest) (res *AuthResponse, err error)
	Update(ctx context.Context, req *UpdateRequest) (res *common.BaseResponse, err error)
	GetUserInfo(ctx context.Context, req *GetUserInfoRequest) (res *GetUserInfoResponse, err error)
}
