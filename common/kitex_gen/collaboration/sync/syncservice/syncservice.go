// Code generated by Kitex v0.13.1. DO NOT EDIT.

package syncservice

import (
	"context"
	"errors"
	"fmt"

	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "github.com/cloudwego/prutal"

	"github.com/Wenrh2004/lark-lite-server/common/kitex_gen/collaboration/sync"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Sync": kitex.NewMethodInfo(
		syncHandler,
		newSyncArgs,
		newSyncResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingBidirectional),
	),
}

var (
	syncServiceServiceInfo                = NewServiceInfo()
	syncServiceServiceInfoForClient       = NewServiceInfoForClient()
	syncServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return syncServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return syncServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return syncServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(true, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "SyncService"
	handlerType := (*sync.SyncService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "collaboration.sync",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.13.1",
		Extra:           extra,
	}
	return svcInfo
}

func syncHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	streamingArgs, ok := arg.(*streaming.Args)
	if !ok {
		return errInvalidMessageType
	}
	st := streamingArgs.Stream
	stream := &syncServiceSyncServer{st}
	return handler.(sync.SyncService).Sync(stream)
}

type syncServiceSyncClient struct {
	streaming.Stream
}

func (x *syncServiceSyncClient) DoFinish(err error) {
	if finisher, ok := x.Stream.(streaming.WithDoFinish); ok {
		finisher.DoFinish(err)
	} else {
		panic(fmt.Sprintf("streaming.WithDoFinish is not implemented by %T", x.Stream))
	}
}
func (x *syncServiceSyncClient) Send(m *sync.ClientMessage) error {
	return x.Stream.SendMsg(m)
}
func (x *syncServiceSyncClient) Recv() (*sync.ServerMessage, error) {
	m := new(sync.ServerMessage)
	return m, x.Stream.RecvMsg(m)
}

type syncServiceSyncServer struct {
	streaming.Stream
}

func (x *syncServiceSyncServer) Send(m *sync.ServerMessage) error {
	return x.Stream.SendMsg(m)
}

func (x *syncServiceSyncServer) Recv() (*sync.ClientMessage, error) {
	m := new(sync.ClientMessage)
	return m, x.Stream.RecvMsg(m)
}

func newSyncArgs() interface{} {
	return &SyncArgs{}
}

func newSyncResult() interface{} {
	return &SyncResult{}
}

type SyncArgs struct {
	Req *sync.ClientMessage
}

func (p *SyncArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SyncArgs) Unmarshal(in []byte) error {
	msg := new(sync.ClientMessage)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SyncArgs_Req_DEFAULT *sync.ClientMessage

func (p *SyncArgs) GetReq() *sync.ClientMessage {
	if !p.IsSetReq() {
		return SyncArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SyncArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SyncArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SyncResult struct {
	Success *sync.ServerMessage
}

var SyncResult_Success_DEFAULT *sync.ServerMessage

func (p *SyncResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SyncResult) Unmarshal(in []byte) error {
	msg := new(sync.ServerMessage)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SyncResult) GetSuccess() *sync.ServerMessage {
	if !p.IsSetSuccess() {
		return SyncResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SyncResult) SetSuccess(x interface{}) {
	p.Success = x.(*sync.ServerMessage)
}

func (p *SyncResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SyncResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Sync(ctx context.Context) (SyncService_SyncClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "Sync", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &syncServiceSyncClient{res.Stream}
	return stream, nil
}
