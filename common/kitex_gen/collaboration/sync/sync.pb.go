// Code generated by Kitex v0.13.1. DO NOT EDIT.

package sync

import (
	"github.com/cloudwego/kitex/pkg/streaming"
	"github.com/cloudwego/prutal"

	"github.com/Wenrh2004/lark-lite-server/common/kitex_gen/common"
)

// 客户端发送的消息
type ClientMessage struct {
	UserId     string `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
	DocumentId string `protobuf:"bytes,2,opt,name=document_id" json:"document_id,omitempty"`
	Timestamp  int64  `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	// Types that are assignable to Content:
	//
	//	*ClientMessage_SyncRequest
	//	*ClientMessage_Update
	Content isClientMessage_Content `protobuf_oneof:"content"`
}

func (x *ClientMessage) Reset() { *x = ClientMessage{} }

func (x *ClientMessage) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ClientMessage) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ClientMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ClientMessage) GetDocumentId() string {
	if x != nil {
		return x.DocumentId
	}
	return ""
}

func (x *ClientMessage) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ClientMessage) GetContent() isClientMessage_Content {
	if x != nil {
		return x.Content
	}
	return nil
}
func (x *ClientMessage) GetSyncRequest() *SyncRequest {
	if p, ok := x.GetContent().(*ClientMessage_SyncRequest); ok {
		return p.SyncRequest
	}
	return nil
}

func (x *ClientMessage) GetUpdate() *UpdateMessage {
	if p, ok := x.GetContent().(*ClientMessage_Update); ok {
		return p.Update
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the prutal package.
func (*ClientMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ClientMessage_SyncRequest)(nil),
		(*ClientMessage_Update)(nil),
	}
}

type isClientMessage_Content interface {
	isClientMessage_Content()
}

type ClientMessage_SyncRequest struct {
	SyncRequest *SyncRequest `protobuf:"bytes,4,opt,name=sync_request" json:"sync_request,omitempty"`
}

func (*ClientMessage_SyncRequest) isClientMessage_Content() {}

type ClientMessage_Update struct {
	Update *UpdateMessage `protobuf:"bytes,5,opt,name=update" json:"update,omitempty"`
}

func (*ClientMessage_Update) isClientMessage_Content() {}

// 服务端发送的消息
type ServerMessage struct {
	UserId     string `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
	DocumentId string `protobuf:"bytes,2,opt,name=document_id" json:"document_id,omitempty"`
	Timestamp  int64  `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	// Types that are assignable to Content:
	//
	//	*ServerMessage_SyncResponse
	//	*ServerMessage_Update
	//	*ServerMessage_Error
	Content isServerMessage_Content `protobuf_oneof:"content"`
}

func (x *ServerMessage) Reset() { *x = ServerMessage{} }

func (x *ServerMessage) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ServerMessage) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ServerMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ServerMessage) GetDocumentId() string {
	if x != nil {
		return x.DocumentId
	}
	return ""
}

func (x *ServerMessage) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ServerMessage) GetContent() isServerMessage_Content {
	if x != nil {
		return x.Content
	}
	return nil
}
func (x *ServerMessage) GetSyncResponse() *SyncResponse {
	if p, ok := x.GetContent().(*ServerMessage_SyncResponse); ok {
		return p.SyncResponse
	}
	return nil
}

func (x *ServerMessage) GetUpdate() *UpdateMessage {
	if p, ok := x.GetContent().(*ServerMessage_Update); ok {
		return p.Update
	}
	return nil
}

func (x *ServerMessage) GetError() *common.BaseResp {
	if p, ok := x.GetContent().(*ServerMessage_Error); ok {
		return p.Error
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the prutal package.
func (*ServerMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ServerMessage_SyncResponse)(nil),
		(*ServerMessage_Update)(nil),
		(*ServerMessage_Error)(nil),
	}
}

type isServerMessage_Content interface {
	isServerMessage_Content()
}

type ServerMessage_SyncResponse struct {
	SyncResponse *SyncResponse `protobuf:"bytes,4,opt,name=sync_response" json:"sync_response,omitempty"`
}

func (*ServerMessage_SyncResponse) isServerMessage_Content() {}

type ServerMessage_Update struct {
	Update *UpdateMessage `protobuf:"bytes,5,opt,name=update" json:"update,omitempty"`
}

func (*ServerMessage_Update) isServerMessage_Content() {}

type ServerMessage_Error struct {
	Error *common.BaseResp `protobuf:"bytes,6,opt,name=error" json:"error,omitempty"`
}

func (*ServerMessage_Error) isServerMessage_Content() {}

// Y.js 同步请求
type SyncRequest struct {
	// Y.js state vector
	StateVector []byte `protobuf:"bytes,1,opt,name=state_vector" json:"state_vector,omitempty"`
}

func (x *SyncRequest) Reset() { *x = SyncRequest{} }

func (x *SyncRequest) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *SyncRequest) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *SyncRequest) GetStateVector() []byte {
	if x != nil {
		return x.StateVector
	}
	return nil
}

// Y.js 同步响应
type SyncResponse struct {
	// Y.js update binary data
	UpdateData []byte `protobuf:"bytes,1,opt,name=update_data" json:"update_data,omitempty"`
}

func (x *SyncResponse) Reset() { *x = SyncResponse{} }

func (x *SyncResponse) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *SyncResponse) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *SyncResponse) GetUpdateData() []byte {
	if x != nil {
		return x.UpdateData
	}
	return nil
}

// Y.js 更新消息
type UpdateMessage struct {
	// Y.js update binary data
	UpdateData []byte `protobuf:"bytes,1,opt,name=update_data" json:"update_data,omitempty"`

	// 更新序列号
	SequenceNumber int64 `protobuf:"varint,3,opt,name=sequence_number" json:"sequence_number,omitempty"`
}

func (x *UpdateMessage) Reset() { *x = UpdateMessage{} }

func (x *UpdateMessage) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *UpdateMessage) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UpdateMessage) GetUpdateData() []byte {
	if x != nil {
		return x.UpdateData
	}
	return nil
}

func (x *UpdateMessage) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

type SyncService interface {
	Sync(stream SyncService_SyncServer) (err error)
}

type SyncService_SyncServer interface {
	streaming.Stream
	Recv() (*ClientMessage, error)
	Send(*ServerMessage) error
}
