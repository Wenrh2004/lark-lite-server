// Code generated by Kitex v0.13.1. DO NOT EDIT.

package awarenessservice

import (
	"context"
	"errors"
	"fmt"

	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "github.com/cloudwego/prutal"

	"github.com/Wenrh2004/lark-lite-server/common/kitex_gen/collaboration/awareness"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Collaborate": kitex.NewMethodInfo(
		collaborateHandler,
		newCollaborateArgs,
		newCollaborateResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingBidirectional),
	),
	"GetActiveUsers": kitex.NewMethodInfo(
		getActiveUsersHandler,
		newGetActiveUsersArgs,
		newGetActiveUsersResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	awarenessServiceServiceInfo                = NewServiceInfo()
	awarenessServiceServiceInfoForClient       = NewServiceInfoForClient()
	awarenessServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return awarenessServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return awarenessServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return awarenessServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(true, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "AwarenessService"
	handlerType := (*awareness.AwarenessService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "collaboration.awareness",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.13.1",
		Extra:           extra,
	}
	return svcInfo
}

func collaborateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	streamingArgs, ok := arg.(*streaming.Args)
	if !ok {
		return errInvalidMessageType
	}
	st := streamingArgs.Stream
	stream := &awarenessServiceCollaborateServer{st}
	return handler.(awareness.AwarenessService).Collaborate(stream)
}

type awarenessServiceCollaborateClient struct {
	streaming.Stream
}

func (x *awarenessServiceCollaborateClient) DoFinish(err error) {
	if finisher, ok := x.Stream.(streaming.WithDoFinish); ok {
		finisher.DoFinish(err)
	} else {
		panic(fmt.Sprintf("streaming.WithDoFinish is not implemented by %T", x.Stream))
	}
}
func (x *awarenessServiceCollaborateClient) Send(m *awareness.ClientMessage) error {
	return x.Stream.SendMsg(m)
}
func (x *awarenessServiceCollaborateClient) Recv() (*awareness.ServerMessage, error) {
	m := new(awareness.ServerMessage)
	return m, x.Stream.RecvMsg(m)
}

type awarenessServiceCollaborateServer struct {
	streaming.Stream
}

func (x *awarenessServiceCollaborateServer) Send(m *awareness.ServerMessage) error {
	return x.Stream.SendMsg(m)
}

func (x *awarenessServiceCollaborateServer) Recv() (*awareness.ClientMessage, error) {
	m := new(awareness.ClientMessage)
	return m, x.Stream.RecvMsg(m)
}

func newCollaborateArgs() interface{} {
	return &CollaborateArgs{}
}

func newCollaborateResult() interface{} {
	return &CollaborateResult{}
}

type CollaborateArgs struct {
	Req *awareness.ClientMessage
}

func (p *CollaborateArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CollaborateArgs) Unmarshal(in []byte) error {
	msg := new(awareness.ClientMessage)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CollaborateArgs_Req_DEFAULT *awareness.ClientMessage

func (p *CollaborateArgs) GetReq() *awareness.ClientMessage {
	if !p.IsSetReq() {
		return CollaborateArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CollaborateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CollaborateArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CollaborateResult struct {
	Success *awareness.ServerMessage
}

var CollaborateResult_Success_DEFAULT *awareness.ServerMessage

func (p *CollaborateResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CollaborateResult) Unmarshal(in []byte) error {
	msg := new(awareness.ServerMessage)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CollaborateResult) GetSuccess() *awareness.ServerMessage {
	if !p.IsSetSuccess() {
		return CollaborateResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CollaborateResult) SetSuccess(x interface{}) {
	p.Success = x.(*awareness.ServerMessage)
}

func (p *CollaborateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CollaborateResult) GetResult() interface{} {
	return p.Success
}

func getActiveUsersHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(awareness.GetActiveUsersRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(awareness.AwarenessService).GetActiveUsers(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetActiveUsersArgs:
		success, err := handler.(awareness.AwarenessService).GetActiveUsers(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetActiveUsersResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetActiveUsersArgs() interface{} {
	return &GetActiveUsersArgs{}
}

func newGetActiveUsersResult() interface{} {
	return &GetActiveUsersResult{}
}

type GetActiveUsersArgs struct {
	Req *awareness.GetActiveUsersRequest
}

func (p *GetActiveUsersArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetActiveUsersArgs) Unmarshal(in []byte) error {
	msg := new(awareness.GetActiveUsersRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetActiveUsersArgs_Req_DEFAULT *awareness.GetActiveUsersRequest

func (p *GetActiveUsersArgs) GetReq() *awareness.GetActiveUsersRequest {
	if !p.IsSetReq() {
		return GetActiveUsersArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetActiveUsersArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetActiveUsersArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetActiveUsersResult struct {
	Success *awareness.GetActiveUsersResponse
}

var GetActiveUsersResult_Success_DEFAULT *awareness.GetActiveUsersResponse

func (p *GetActiveUsersResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetActiveUsersResult) Unmarshal(in []byte) error {
	msg := new(awareness.GetActiveUsersResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetActiveUsersResult) GetSuccess() *awareness.GetActiveUsersResponse {
	if !p.IsSetSuccess() {
		return GetActiveUsersResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetActiveUsersResult) SetSuccess(x interface{}) {
	p.Success = x.(*awareness.GetActiveUsersResponse)
}

func (p *GetActiveUsersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetActiveUsersResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Collaborate(ctx context.Context) (AwarenessService_CollaborateClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "Collaborate", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &awarenessServiceCollaborateClient{res.Stream}
	return stream, nil
}

func (p *kClient) GetActiveUsers(ctx context.Context, Req *awareness.GetActiveUsersRequest) (r *awareness.GetActiveUsersResponse, err error) {
	var _args GetActiveUsersArgs
	_args.Req = Req
	var _result GetActiveUsersResult
	if err = p.c.Call(ctx, "GetActiveUsers", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
