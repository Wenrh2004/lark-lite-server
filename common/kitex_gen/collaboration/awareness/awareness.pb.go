// Code generated by Kitex v0.13.1. DO NOT EDIT.

package awareness

import (
	"context"

	"github.com/cloudwego/kitex/pkg/streaming"
	"github.com/cloudwego/prutal"

	"github.com/Wenrh2004/lark-lite-server/common/kitex_gen/common"
)

// 客户端发送的消息
type ClientMessage struct {
	UserId     string `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
	DocumentId string `protobuf:"bytes,2,opt,name=document_id" json:"document_id,omitempty"`
	Timestamp  int64  `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	// Types that are assignable to Content:
	//
	//	*ClientMessage_Awareness
	//	*ClientMessage_JoinDocument
	//	*ClientMessage_LeaveDocument
	//	*ClientMessage_Heartbeat
	Content isClientMessage_Content `protobuf_oneof:"content"`
}

func (x *ClientMessage) Reset() { *x = ClientMessage{} }

func (x *ClientMessage) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ClientMessage) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ClientMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ClientMessage) GetDocumentId() string {
	if x != nil {
		return x.DocumentId
	}
	return ""
}

func (x *ClientMessage) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ClientMessage) GetContent() isClientMessage_Content {
	if x != nil {
		return x.Content
	}
	return nil
}
func (x *ClientMessage) GetAwareness() *AwarenessUpdate {
	if p, ok := x.GetContent().(*ClientMessage_Awareness); ok {
		return p.Awareness
	}
	return nil
}

func (x *ClientMessage) GetJoinDocument() *JoinDocument {
	if p, ok := x.GetContent().(*ClientMessage_JoinDocument); ok {
		return p.JoinDocument
	}
	return nil
}

func (x *ClientMessage) GetLeaveDocument() *LeaveDocument {
	if p, ok := x.GetContent().(*ClientMessage_LeaveDocument); ok {
		return p.LeaveDocument
	}
	return nil
}

func (x *ClientMessage) GetHeartbeat() *HeartBeat {
	if p, ok := x.GetContent().(*ClientMessage_Heartbeat); ok {
		return p.Heartbeat
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the prutal package.
func (*ClientMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ClientMessage_Awareness)(nil),
		(*ClientMessage_JoinDocument)(nil),
		(*ClientMessage_LeaveDocument)(nil),
		(*ClientMessage_Heartbeat)(nil),
	}
}

type isClientMessage_Content interface {
	isClientMessage_Content()
}

type ClientMessage_Awareness struct {
	Awareness *AwarenessUpdate `protobuf:"bytes,4,opt,name=awareness" json:"awareness,omitempty"`
}

func (*ClientMessage_Awareness) isClientMessage_Content() {}

type ClientMessage_JoinDocument struct {
	JoinDocument *JoinDocument `protobuf:"bytes,5,opt,name=join_document" json:"join_document,omitempty"`
}

func (*ClientMessage_JoinDocument) isClientMessage_Content() {}

type ClientMessage_LeaveDocument struct {
	LeaveDocument *LeaveDocument `protobuf:"bytes,6,opt,name=leave_document" json:"leave_document,omitempty"`
}

func (*ClientMessage_LeaveDocument) isClientMessage_Content() {}

type ClientMessage_Heartbeat struct {
	Heartbeat *HeartBeat `protobuf:"bytes,7,opt,name=heartbeat" json:"heartbeat,omitempty"`
}

func (*ClientMessage_Heartbeat) isClientMessage_Content() {}

// 服务端发送的消息
type ServerMessage struct {
	UserId     string `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
	DocumentId string `protobuf:"bytes,2,opt,name=document_id" json:"document_id,omitempty"`
	Timestamp  int64  `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	// Types that are assignable to Content:
	//
	//	*ServerMessage_Awareness
	//	*ServerMessage_UserJoined
	//	*ServerMessage_UserLeft
	//	*ServerMessage_ActiveUser
	//	*ServerMessage_Error
	Content isServerMessage_Content `protobuf_oneof:"content"`
}

func (x *ServerMessage) Reset() { *x = ServerMessage{} }

func (x *ServerMessage) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ServerMessage) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ServerMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ServerMessage) GetDocumentId() string {
	if x != nil {
		return x.DocumentId
	}
	return ""
}

func (x *ServerMessage) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ServerMessage) GetContent() isServerMessage_Content {
	if x != nil {
		return x.Content
	}
	return nil
}
func (x *ServerMessage) GetAwareness() *AwarenessUpdate {
	if p, ok := x.GetContent().(*ServerMessage_Awareness); ok {
		return p.Awareness
	}
	return nil
}

func (x *ServerMessage) GetUserJoined() *UserJoined {
	if p, ok := x.GetContent().(*ServerMessage_UserJoined); ok {
		return p.UserJoined
	}
	return nil
}

func (x *ServerMessage) GetUserLeft() *UserLeft {
	if p, ok := x.GetContent().(*ServerMessage_UserLeft); ok {
		return p.UserLeft
	}
	return nil
}

func (x *ServerMessage) GetActiveUser() *ActiveUser {
	if p, ok := x.GetContent().(*ServerMessage_ActiveUser); ok {
		return p.ActiveUser
	}
	return nil
}

func (x *ServerMessage) GetError() *common.BaseResp {
	if p, ok := x.GetContent().(*ServerMessage_Error); ok {
		return p.Error
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the prutal package.
func (*ServerMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ServerMessage_Awareness)(nil),
		(*ServerMessage_UserJoined)(nil),
		(*ServerMessage_UserLeft)(nil),
		(*ServerMessage_ActiveUser)(nil),
		(*ServerMessage_Error)(nil),
	}
}

type isServerMessage_Content interface {
	isServerMessage_Content()
}

type ServerMessage_Awareness struct {
	Awareness *AwarenessUpdate `protobuf:"bytes,4,opt,name=awareness" json:"awareness,omitempty"`
}

func (*ServerMessage_Awareness) isServerMessage_Content() {}

type ServerMessage_UserJoined struct {
	UserJoined *UserJoined `protobuf:"bytes,5,opt,name=user_joined" json:"user_joined,omitempty"`
}

func (*ServerMessage_UserJoined) isServerMessage_Content() {}

type ServerMessage_UserLeft struct {
	UserLeft *UserLeft `protobuf:"bytes,6,opt,name=user_left" json:"user_left,omitempty"`
}

func (*ServerMessage_UserLeft) isServerMessage_Content() {}

type ServerMessage_ActiveUser struct {
	ActiveUser *ActiveUser `protobuf:"bytes,7,opt,name=active_user" json:"active_user,omitempty"`
}

func (*ServerMessage_ActiveUser) isServerMessage_Content() {}

type ServerMessage_Error struct {
	Error *common.BaseResp `protobuf:"bytes,8,opt,name=error" json:"error,omitempty"`
}

func (*ServerMessage_Error) isServerMessage_Content() {}

// Y.js 同步请求
type SyncRequest struct {
	// Y.js state vector
	StateVector []byte `protobuf:"bytes,1,opt,name=state_vector" json:"state_vector,omitempty"`
}

func (x *SyncRequest) Reset() { *x = SyncRequest{} }

func (x *SyncRequest) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *SyncRequest) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *SyncRequest) GetStateVector() []byte {
	if x != nil {
		return x.StateVector
	}
	return nil
}

// Y.js 同步响应
type SyncResponse struct {
	// Y.js update binary data
	UpdateData []byte `protobuf:"bytes,1,opt,name=update_data" json:"update_data,omitempty"`
}

func (x *SyncResponse) Reset() { *x = SyncResponse{} }

func (x *SyncResponse) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *SyncResponse) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *SyncResponse) GetUpdateData() []byte {
	if x != nil {
		return x.UpdateData
	}
	return nil
}

// Y.js 更新消息
type UpdateMessage struct {
	// Y.js update binary data
	UpdateData []byte `protobuf:"bytes,1,opt,name=update_data" json:"update_data,omitempty"`

	// 更新序列号
	SequenceNumber int64 `protobuf:"varint,3,opt,name=sequence_number" json:"sequence_number,omitempty"`
}

func (x *UpdateMessage) Reset() { *x = UpdateMessage{} }

func (x *UpdateMessage) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *UpdateMessage) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UpdateMessage) GetUpdateData() []byte {
	if x != nil {
		return x.UpdateData
	}
	return nil
}

func (x *UpdateMessage) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

// 用户感知信息更新（光标位置、选择等）
type AwarenessUpdate struct {
	ClientId string `protobuf:"bytes,1,opt,name=client_id" json:"client_id,omitempty"`

	// 用户信息 JSON 格式
	UserInfo string `protobuf:"bytes,2,opt,name=user_info" json:"user_info,omitempty"`

	// 感知状态 JSON 格式（包含光标位置、选择范围等）
	AwarenessState string `protobuf:"bytes,3,opt,name=awareness_state" json:"awareness_state,omitempty"`

	// 时间戳
	Timestamp int64 `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (x *AwarenessUpdate) Reset() { *x = AwarenessUpdate{} }

func (x *AwarenessUpdate) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *AwarenessUpdate) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *AwarenessUpdate) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *AwarenessUpdate) GetUserInfo() string {
	if x != nil {
		return x.UserInfo
	}
	return ""
}

func (x *AwarenessUpdate) GetAwarenessState() string {
	if x != nil {
		return x.AwarenessState
	}
	return ""
}

func (x *AwarenessUpdate) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// 加入文档
type JoinDocument struct {
	UserId       string            `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
	UserName     string            `protobuf:"bytes,2,opt,name=user_name" json:"user_name,omitempty"`
	UserColor    string            `protobuf:"bytes,3,opt,name=user_color" json:"user_color,omitempty"`
	UserMetadata map[string]string `protobuf:"bytes,4,rep,name=user_metadata" json:"user_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *JoinDocument) Reset() { *x = JoinDocument{} }

func (x *JoinDocument) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *JoinDocument) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *JoinDocument) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *JoinDocument) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *JoinDocument) GetUserColor() string {
	if x != nil {
		return x.UserColor
	}
	return ""
}

func (x *JoinDocument) GetUserMetadata() map[string]string {
	if x != nil {
		return x.UserMetadata
	}
	return nil
}

// 离开文档
type LeaveDocument struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
}

func (x *LeaveDocument) Reset() { *x = LeaveDocument{} }

func (x *LeaveDocument) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *LeaveDocument) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *LeaveDocument) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// 心跳消息
type HeartBeat struct {
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (x *HeartBeat) Reset() { *x = HeartBeat{} }

func (x *HeartBeat) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *HeartBeat) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *HeartBeat) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// 用户加入通知
type UserJoined struct {
	UserId       string            `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
	UserName     string            `protobuf:"bytes,2,opt,name=user_name" json:"user_name,omitempty"`
	UserColor    string            `protobuf:"bytes,3,opt,name=user_color" json:"user_color,omitempty"`
	ClientId     string            `protobuf:"bytes,4,opt,name=client_id" json:"client_id,omitempty"`
	UserMetadata map[string]string `protobuf:"bytes,5,rep,name=user_metadata" json:"user_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *UserJoined) Reset() { *x = UserJoined{} }

func (x *UserJoined) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *UserJoined) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UserJoined) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserJoined) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UserJoined) GetUserColor() string {
	if x != nil {
		return x.UserColor
	}
	return ""
}

func (x *UserJoined) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *UserJoined) GetUserMetadata() map[string]string {
	if x != nil {
		return x.UserMetadata
	}
	return nil
}

// 用户离开通知
type UserLeft struct {
	UserId   string `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
	ClientId string `protobuf:"bytes,2,opt,name=client_id" json:"client_id,omitempty"`
}

func (x *UserLeft) Reset() { *x = UserLeft{} }

func (x *UserLeft) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *UserLeft) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UserLeft) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserLeft) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

// 文档状态
type DocumentState struct {
	StateVector  []byte        `protobuf:"bytes,1,opt,name=state_vector" json:"state_vector,omitempty"`
	DocumentData []byte        `protobuf:"bytes,2,opt,name=document_data" json:"document_data,omitempty"`
	ActiveUsers  []*ActiveUser `protobuf:"bytes,3,rep,name=active_users" json:"active_users,omitempty"`
	LastModified int64         `protobuf:"varint,4,opt,name=last_modified" json:"last_modified,omitempty"`
}

func (x *DocumentState) Reset() { *x = DocumentState{} }

func (x *DocumentState) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *DocumentState) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *DocumentState) GetStateVector() []byte {
	if x != nil {
		return x.StateVector
	}
	return nil
}

func (x *DocumentState) GetDocumentData() []byte {
	if x != nil {
		return x.DocumentData
	}
	return nil
}

func (x *DocumentState) GetActiveUsers() []*ActiveUser {
	if x != nil {
		return x.ActiveUsers
	}
	return nil
}

func (x *DocumentState) GetLastModified() int64 {
	if x != nil {
		return x.LastModified
	}
	return 0
}

// 获取文档状态请求
type GetDocumentStateRequest struct {
	DocumentId string `protobuf:"bytes,1,opt,name=document_id" json:"document_id,omitempty"`
	ClientId   string `protobuf:"bytes,2,opt,name=client_id" json:"client_id,omitempty"`
}

func (x *GetDocumentStateRequest) Reset() { *x = GetDocumentStateRequest{} }

func (x *GetDocumentStateRequest) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *GetDocumentStateRequest) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *GetDocumentStateRequest) GetDocumentId() string {
	if x != nil {
		return x.DocumentId
	}
	return ""
}

func (x *GetDocumentStateRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

// 获取文档状态响应
type GetDocumentStateResponse struct {
	DocumentState *DocumentState `protobuf:"bytes,1,opt,name=document_state" json:"document_state,omitempty"`
}

func (x *GetDocumentStateResponse) Reset() { *x = GetDocumentStateResponse{} }

func (x *GetDocumentStateResponse) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *GetDocumentStateResponse) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *GetDocumentStateResponse) GetDocumentState() *DocumentState {
	if x != nil {
		return x.DocumentState
	}
	return nil
}

// 获取活跃用户请求
type GetActiveUsersRequest struct {
	DocumentId string `protobuf:"bytes,1,opt,name=document_id" json:"document_id,omitempty"`
}

func (x *GetActiveUsersRequest) Reset() { *x = GetActiveUsersRequest{} }

func (x *GetActiveUsersRequest) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *GetActiveUsersRequest) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *GetActiveUsersRequest) GetDocumentId() string {
	if x != nil {
		return x.DocumentId
	}
	return ""
}

// 获取活跃用户响应
type GetActiveUsersResponse struct {
	ActiveUsers []*ActiveUser `protobuf:"bytes,1,rep,name=active_users" json:"active_users,omitempty"`
}

func (x *GetActiveUsersResponse) Reset() { *x = GetActiveUsersResponse{} }

func (x *GetActiveUsersResponse) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *GetActiveUsersResponse) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *GetActiveUsersResponse) GetActiveUsers() []*ActiveUser {
	if x != nil {
		return x.ActiveUsers
	}
	return nil
}

// 活跃用户信息
type ActiveUser struct {
	UserId       string            `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
	UserName     string            `protobuf:"bytes,2,opt,name=user_name" json:"user_name,omitempty"`
	UserColor    string            `protobuf:"bytes,3,opt,name=user_color" json:"user_color,omitempty"`
	IsActive     bool              `protobuf:"varint,4,opt,name=is_active" json:"is_active,omitempty"`
	UserMetadata map[string]string `protobuf:"bytes,5,rep,name=user_metadata" json:"user_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *ActiveUser) Reset() { *x = ActiveUser{} }

func (x *ActiveUser) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ActiveUser) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ActiveUser) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ActiveUser) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *ActiveUser) GetUserColor() string {
	if x != nil {
		return x.UserColor
	}
	return ""
}

func (x *ActiveUser) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *ActiveUser) GetUserMetadata() map[string]string {
	if x != nil {
		return x.UserMetadata
	}
	return nil
}

type AwarenessService interface {
	Collaborate(stream AwarenessService_CollaborateServer) (err error)
	GetActiveUsers(ctx context.Context, req *GetActiveUsersRequest) (res *GetActiveUsersResponse, err error)
}

type AwarenessService_CollaborateServer interface {
	streaming.Stream
	Recv() (*ClientMessage, error)
	Send(*ServerMessage) error
}
