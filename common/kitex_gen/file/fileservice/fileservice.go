// Code generated by Kitex v0.13.1. DO NOT EDIT.

package fileservice

import (
	"context"
	"errors"

	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "github.com/cloudwego/prutal"

	"github.com/Wenrh2004/lark-lite-server/common/kitex_gen/file"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"PrepareUpload": kitex.NewMethodInfo(
		prepareUploadHandler,
		newPrepareUploadArgs,
		newPrepareUploadResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CompleteUpload": kitex.NewMethodInfo(
		completeUploadHandler,
		newCompleteUploadArgs,
		newCompleteUploadResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetFileStatus": kitex.NewMethodInfo(
		getFileStatusHandler,
		newGetFileStatusArgs,
		newGetFileStatusResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	fileServiceServiceInfo                = NewServiceInfo()
	fileServiceServiceInfoForClient       = NewServiceInfoForClient()
	fileServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return fileServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return fileServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return fileServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "FileService"
	handlerType := (*file.FileService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "file",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.13.1",
		Extra:           extra,
	}
	return svcInfo
}

func prepareUploadHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(file.PrepareUploadReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(file.FileService).PrepareUpload(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *PrepareUploadArgs:
		success, err := handler.(file.FileService).PrepareUpload(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*PrepareUploadResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newPrepareUploadArgs() interface{} {
	return &PrepareUploadArgs{}
}

func newPrepareUploadResult() interface{} {
	return &PrepareUploadResult{}
}

type PrepareUploadArgs struct {
	Req *file.PrepareUploadReq
}

func (p *PrepareUploadArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *PrepareUploadArgs) Unmarshal(in []byte) error {
	msg := new(file.PrepareUploadReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var PrepareUploadArgs_Req_DEFAULT *file.PrepareUploadReq

func (p *PrepareUploadArgs) GetReq() *file.PrepareUploadReq {
	if !p.IsSetReq() {
		return PrepareUploadArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *PrepareUploadArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PrepareUploadArgs) GetFirstArgument() interface{} {
	return p.Req
}

type PrepareUploadResult struct {
	Success *file.PrepareUploadResp
}

var PrepareUploadResult_Success_DEFAULT *file.PrepareUploadResp

func (p *PrepareUploadResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *PrepareUploadResult) Unmarshal(in []byte) error {
	msg := new(file.PrepareUploadResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *PrepareUploadResult) GetSuccess() *file.PrepareUploadResp {
	if !p.IsSetSuccess() {
		return PrepareUploadResult_Success_DEFAULT
	}
	return p.Success
}

func (p *PrepareUploadResult) SetSuccess(x interface{}) {
	p.Success = x.(*file.PrepareUploadResp)
}

func (p *PrepareUploadResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PrepareUploadResult) GetResult() interface{} {
	return p.Success
}

func completeUploadHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(file.CompleteUploadReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(file.FileService).CompleteUpload(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CompleteUploadArgs:
		success, err := handler.(file.FileService).CompleteUpload(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CompleteUploadResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCompleteUploadArgs() interface{} {
	return &CompleteUploadArgs{}
}

func newCompleteUploadResult() interface{} {
	return &CompleteUploadResult{}
}

type CompleteUploadArgs struct {
	Req *file.CompleteUploadReq
}

func (p *CompleteUploadArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CompleteUploadArgs) Unmarshal(in []byte) error {
	msg := new(file.CompleteUploadReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CompleteUploadArgs_Req_DEFAULT *file.CompleteUploadReq

func (p *CompleteUploadArgs) GetReq() *file.CompleteUploadReq {
	if !p.IsSetReq() {
		return CompleteUploadArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CompleteUploadArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CompleteUploadArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CompleteUploadResult struct {
	Success *file.CompleteUploadResp
}

var CompleteUploadResult_Success_DEFAULT *file.CompleteUploadResp

func (p *CompleteUploadResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CompleteUploadResult) Unmarshal(in []byte) error {
	msg := new(file.CompleteUploadResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CompleteUploadResult) GetSuccess() *file.CompleteUploadResp {
	if !p.IsSetSuccess() {
		return CompleteUploadResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CompleteUploadResult) SetSuccess(x interface{}) {
	p.Success = x.(*file.CompleteUploadResp)
}

func (p *CompleteUploadResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CompleteUploadResult) GetResult() interface{} {
	return p.Success
}

func getFileStatusHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(file.GetFileStatusReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(file.FileService).GetFileStatus(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetFileStatusArgs:
		success, err := handler.(file.FileService).GetFileStatus(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFileStatusResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetFileStatusArgs() interface{} {
	return &GetFileStatusArgs{}
}

func newGetFileStatusResult() interface{} {
	return &GetFileStatusResult{}
}

type GetFileStatusArgs struct {
	Req *file.GetFileStatusReq
}

func (p *GetFileStatusArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetFileStatusArgs) Unmarshal(in []byte) error {
	msg := new(file.GetFileStatusReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFileStatusArgs_Req_DEFAULT *file.GetFileStatusReq

func (p *GetFileStatusArgs) GetReq() *file.GetFileStatusReq {
	if !p.IsSetReq() {
		return GetFileStatusArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFileStatusArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetFileStatusArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetFileStatusResult struct {
	Success *file.GetFileStatusResp
}

var GetFileStatusResult_Success_DEFAULT *file.GetFileStatusResp

func (p *GetFileStatusResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetFileStatusResult) Unmarshal(in []byte) error {
	msg := new(file.GetFileStatusResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFileStatusResult) GetSuccess() *file.GetFileStatusResp {
	if !p.IsSetSuccess() {
		return GetFileStatusResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFileStatusResult) SetSuccess(x interface{}) {
	p.Success = x.(*file.GetFileStatusResp)
}

func (p *GetFileStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetFileStatusResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) PrepareUpload(ctx context.Context, Req *file.PrepareUploadReq) (r *file.PrepareUploadResp, err error) {
	var _args PrepareUploadArgs
	_args.Req = Req
	var _result PrepareUploadResult
	if err = p.c.Call(ctx, "PrepareUpload", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CompleteUpload(ctx context.Context, Req *file.CompleteUploadReq) (r *file.CompleteUploadResp, err error) {
	var _args CompleteUploadArgs
	_args.Req = Req
	var _result CompleteUploadResult
	if err = p.c.Call(ctx, "CompleteUpload", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFileStatus(ctx context.Context, Req *file.GetFileStatusReq) (r *file.GetFileStatusResp, err error) {
	var _args GetFileStatusArgs
	_args.Req = Req
	var _result GetFileStatusResult
	if err = p.c.Call(ctx, "GetFileStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
