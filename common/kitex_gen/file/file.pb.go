// Code generated by Kitex v0.13.1. DO NOT EDIT.

package file

import (
	"context"
	"strconv"

	"github.com/cloudwego/prutal"
)

type GetFileStatusResp_Status int32

const (
	GetFileStatusResp_PENDING  GetFileStatusResp_Status = 0
	GetFileStatusResp_UPLOADED GetFileStatusResp_Status = 1
	GetFileStatusResp_FAILED   GetFileStatusResp_Status = 2
)

// Enum value maps for GetFileStatusResp_Status.
var GetFileStatusResp_Status_name = map[int32]string{
	0: "PENDING",
	1: "UPLOADED",
	2: "FAILED",
}

var GetFileStatusResp_Status_value = map[string]int32{
	"PENDING":  0,
	"UPLOADED": 1,
	"FAILED":   2,
}

func (x GetFileStatusResp_Status) String() string {
	s, ok := GetFileStatusResp_Status_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

type PrepareUploadReq struct {
	Domain      string `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"` // 业务域
	FileName    string `protobuf:"bytes,2,opt,name=file_name" json:"file_name,omitempty"`
	Size        int64  `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	Md5         string `protobuf:"bytes,4,opt,name=md5" json:"md5,omitempty"`
	ContentType string `protobuf:"bytes,5,opt,name=content_type" json:"content_type,omitempty"`
}

func (x *PrepareUploadReq) Reset() { *x = PrepareUploadReq{} }

func (x *PrepareUploadReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *PrepareUploadReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *PrepareUploadReq) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *PrepareUploadReq) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *PrepareUploadReq) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PrepareUploadReq) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *PrepareUploadReq) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

type PrepareUploadResp struct {
	Exists    bool   `protobuf:"varint,1,opt,name=exists" json:"exists,omitempty"` // true=秒传
	FileId    uint64 `protobuf:"varint,2,opt,name=file_id" json:"file_id,omitempty"`
	UploadUrl string `protobuf:"bytes,3,opt,name=upload_url" json:"upload_url,omitempty"` // 不存在时，presigned PUT URL
	AccessUrl string `protobuf:"bytes,4,opt,name=access_url" json:"access_url,omitempty"` // 已存在或完成后可直接访问的 URL
}

func (x *PrepareUploadResp) Reset() { *x = PrepareUploadResp{} }

func (x *PrepareUploadResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *PrepareUploadResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *PrepareUploadResp) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

func (x *PrepareUploadResp) GetFileId() uint64 {
	if x != nil {
		return x.FileId
	}
	return 0
}

func (x *PrepareUploadResp) GetUploadUrl() string {
	if x != nil {
		return x.UploadUrl
	}
	return ""
}

func (x *PrepareUploadResp) GetAccessUrl() string {
	if x != nil {
		return x.AccessUrl
	}
	return ""
}

type CompleteUploadReq struct {
	FileId   uint64 `protobuf:"varint,1,opt,name=file_id" json:"file_id,omitempty"`
	UploadBy uint64 `protobuf:"varint,6,opt,name=upload_by" json:"upload_by,omitempty"` // 上传者 ID
}

func (x *CompleteUploadReq) Reset() { *x = CompleteUploadReq{} }

func (x *CompleteUploadReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *CompleteUploadReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *CompleteUploadReq) GetFileId() uint64 {
	if x != nil {
		return x.FileId
	}
	return 0
}

func (x *CompleteUploadReq) GetUploadBy() uint64 {
	if x != nil {
		return x.UploadBy
	}
	return 0
}

type CompleteUploadResp struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (x *CompleteUploadResp) Reset() { *x = CompleteUploadResp{} }

func (x *CompleteUploadResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *CompleteUploadResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *CompleteUploadResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetFileStatusReq struct {
	FileId uint64 `protobuf:"varint,1,opt,name=file_id" json:"file_id,omitempty"`
}

func (x *GetFileStatusReq) Reset() { *x = GetFileStatusReq{} }

func (x *GetFileStatusReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *GetFileStatusReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *GetFileStatusReq) GetFileId() uint64 {
	if x != nil {
		return x.FileId
	}
	return 0
}

type GetFileStatusResp struct {
	Status    GetFileStatusResp_Status `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	AccessUrl string                   `protobuf:"bytes,2,opt,name=access_url" json:"access_url,omitempty"`
}

func (x *GetFileStatusResp) Reset() { *x = GetFileStatusResp{} }

func (x *GetFileStatusResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *GetFileStatusResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *GetFileStatusResp) GetStatus() GetFileStatusResp_Status {
	if x != nil {
		return x.Status
	}
	return GetFileStatusResp_PENDING
}

func (x *GetFileStatusResp) GetAccessUrl() string {
	if x != nil {
		return x.AccessUrl
	}
	return ""
}

type FileService interface {
	PrepareUpload(ctx context.Context, req *PrepareUploadReq) (res *PrepareUploadResp, err error)
	CompleteUpload(ctx context.Context, req *CompleteUploadReq) (res *CompleteUploadResp, err error)
	GetFileStatus(ctx context.Context, req *GetFileStatusReq) (res *GetFileStatusResp, err error)
}
